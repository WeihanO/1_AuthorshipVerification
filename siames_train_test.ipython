{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"siames.ipython","provenance":[{"file_id":"1_77hTk_kVWGP04HpgnX-yzHnjA0lo6fZ","timestamp":1564574239700}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"Ez_5gfRQ0bn_","colab_type":"code","outputId":"3416bde2-65f3-4f5e-9ef9-3458281d9fcf","executionInfo":{"status":"ok","timestamp":1580433838273,"user_tz":300,"elapsed":953,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# mount Google Drive\n","from google.colab import drive\n","import os\n","drive.mount('/content/drive')\n","\n","# change the directory below to your drive's data folder\n","os.chdir('/content/drive/My Drive/Projects/1_Verification_Sourcecode_Siamese/data_gen/siamese/lstm-siamese-text-similarity')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"71mRspDwOYHg","colab_type":"code","outputId":"df99bf4a-5f4c-4510-a89f-9b6056a46045","executionInfo":{"status":"ok","timestamp":1580433305103,"user_tz":300,"elapsed":15625,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# clone repo and install requirements\n","#!git clone https://github.com/amansrivastava17/lstm-siamese-text-similarity.git\n","!pip install tensorflow==1.14\n","!pip install tensorboard==1.12.0\n","!pip install pandas==0.23.4\n","!pip install Keras==2.2.4\n","!pip install gensim==3.6.\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: tensorflow==1.14 in /usr/local/lib/python3.6/dist-packages (1.14.0)\n","Requirement already satisfied: numpy<2.0,>=1.14.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (1.17.5)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (1.1.0)\n","Requirement already satisfied: google-pasta>=0.1.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (0.1.8)\n","Requirement already satisfied: gast>=0.2.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (0.2.2)\n","Requirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (1.11.2)\n","Requirement already satisfied: tensorflow-estimator<1.15.0rc0,>=1.14.0rc0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (1.14.0)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (1.15.0)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (1.12.0)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (1.1.0)\n","Collecting tensorboard<1.15.0,>=1.14.0\n","  Using cached https://files.pythonhosted.org/packages/91/2d/2ed263449a078cd9c8a9ba50ebd50123adf1f8cfbea1492f9084169b89d9/tensorboard-1.14.0-py3-none-any.whl\n","Requirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (0.8.1)\n","Requirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (0.9.0)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (3.10.0)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (0.33.6)\n","Requirement already satisfied: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14) (1.0.8)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.15.0,>=1.14.0->tensorflow==1.14) (3.1.1)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.15.0,>=1.14.0->tensorflow==1.14) (0.16.0)\n","Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.15.0,>=1.14.0->tensorflow==1.14) (42.0.2)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications>=1.0.6->tensorflow==1.14) (2.8.0)\n","Installing collected packages: tensorboard\n","  Found existing installation: tensorboard 1.12.0\n","    Uninstalling tensorboard-1.12.0:\n","      Successfully uninstalled tensorboard-1.12.0\n","Successfully installed tensorboard-1.14.0\n","Collecting tensorboard==1.12.0\n","  Using cached https://files.pythonhosted.org/packages/e0/d0/65fe48383146199f16dbd5999ef226b87bce63ad5cd73c840cf722637969/tensorboard-1.12.0-py3-none-any.whl\n","Requirement already satisfied: grpcio>=1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorboard==1.12.0) (1.15.0)\n","Requirement already satisfied: numpy>=1.12.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard==1.12.0) (1.17.5)\n","Requirement already satisfied: werkzeug>=0.11.10 in /usr/local/lib/python3.6/dist-packages (from tensorboard==1.12.0) (0.16.0)\n","Requirement already satisfied: protobuf>=3.4.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard==1.12.0) (3.10.0)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard==1.12.0) (1.12.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard==1.12.0) (3.1.1)\n","Requirement already satisfied: wheel>=0.26; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from tensorboard==1.12.0) (0.33.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.4.0->tensorboard==1.12.0) (42.0.2)\n","\u001b[31mERROR: tensorflow 1.14.0 has requirement tensorboard<1.15.0,>=1.14.0, but you'll have tensorboard 1.12.0 which is incompatible.\u001b[0m\n","Installing collected packages: tensorboard\n","  Found existing installation: tensorboard 1.14.0\n","    Uninstalling tensorboard-1.14.0:\n","      Successfully uninstalled tensorboard-1.14.0\n","Successfully installed tensorboard-1.12.0\n","Requirement already satisfied: pandas==0.23.4 in /usr/local/lib/python3.6/dist-packages (0.23.4)\n","Requirement already satisfied: python-dateutil>=2.5.0 in /usr/local/lib/python3.6/dist-packages (from pandas==0.23.4) (2.6.1)\n","Requirement already satisfied: pytz>=2011k in /usr/local/lib/python3.6/dist-packages (from pandas==0.23.4) (2018.9)\n","Requirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from pandas==0.23.4) (1.17.5)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.5.0->pandas==0.23.4) (1.12.0)\n","Requirement already satisfied: Keras==2.2.4 in /usr/local/lib/python3.6/dist-packages (2.2.4)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from Keras==2.2.4) (1.12.0)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.6/dist-packages (from Keras==2.2.4) (3.13)\n","Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.6/dist-packages (from Keras==2.2.4) (1.17.5)\n","Requirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.6/dist-packages (from Keras==2.2.4) (1.4.1)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from Keras==2.2.4) (2.8.0)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from Keras==2.2.4) (1.1.0)\n","Requirement already satisfied: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from Keras==2.2.4) (1.0.8)\n","Requirement already satisfied: gensim==3.6. in /usr/local/lib/python3.6/dist-packages (3.6.0)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.6/dist-packages (from gensim==3.6.) (1.12.0)\n","Requirement already satisfied: numpy>=1.11.3 in /usr/local/lib/python3.6/dist-packages (from gensim==3.6.) (1.17.5)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.6/dist-packages (from gensim==3.6.) (1.9.0)\n","Requirement already satisfied: scipy>=0.18.1 in /usr/local/lib/python3.6/dist-packages (from gensim==3.6.) (1.4.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim==3.6.) (2.21.0)\n","Requirement already satisfied: boto3 in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim==3.6.) (1.10.47)\n","Requirement already satisfied: boto>=2.32 in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim==3.6.) (2.49.0)\n","Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim==3.6.) (3.0.4)\n","Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim==3.6.) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim==3.6.) (2019.11.28)\n","Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim==3.6.) (2.8)\n","Requirement already satisfied: botocore<1.14.0,>=1.13.47 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim==3.6.) (1.13.47)\n","Requirement already satisfied: jmespath<1.0.0,>=0.7.1 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim==3.6.) (0.9.4)\n","Requirement already satisfied: s3transfer<0.3.0,>=0.2.0 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim==3.6.) (0.2.1)\n","Requirement already satisfied: docutils<0.16,>=0.10 in /usr/local/lib/python3.6/dist-packages (from botocore<1.14.0,>=1.13.47->boto3->smart-open>=1.2.1->gensim==3.6.) (0.15.2)\n","Requirement already satisfied: python-dateutil<3.0.0,>=2.1; python_version >= \"2.7\" in /usr/local/lib/python3.6/dist-packages (from botocore<1.14.0,>=1.13.47->boto3->smart-open>=1.2.1->gensim==3.6.) (2.6.1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8MUaXh4izDW4","colab_type":"code","outputId":"cae97466-c835-4b40-edd1-0708a4040a9d","executionInfo":{"status":"ok","timestamp":1579886744589,"user_tz":300,"elapsed":1382,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}},"colab":{"base_uri":"https://localhost:8080/","height":321}},"source":["import tensorflow as tf\n","import keras\n","import pandas as pd\n","import numpy as np"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n","WARNING:root:Limited tf.compat.v2.summary API due to missing TensorBoard installation.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"dG036H4tBkVL","colab_type":"code","outputId":"284d805a-1be3-4628-98af-74b57a5ec42c","executionInfo":{"status":"ok","timestamp":1579208483566,"user_tz":300,"elapsed":1799,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# read in data sets\n","data_tr = pd.read_csv('../../data_GCJ/c2v/Exp1-compare_result_of_each_language-use_data_across_all_years/java/train.csv')\n","data_val = pd.read_csv('../../data_GCJ/c2v/Exp1-compare_result_of_each_language-use_data_across_all_years/java/vali.csv')\n","data_tr = pd.concat([data_tr, data_val], sort=False)\n","print(data_tr.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(23784, 11)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SxqTGPxjywpb","colab_type":"text"},"source":["=========================== Generate train data for siamese network ==========================="]},{"cell_type":"code","metadata":{"id":"aoTkFJxs4rRj","colab_type":"code","colab":{}},"source":["# func to set sentence pairs\n","global i\n","i = [0]\n","\n","def func(this_row):\n","  random_state=1\n","  if this_row['if_same']:\n","    i[0] += 1\n","    return np.random.choice(data_tr.loc[data_tr['username']==this_row['username']]['flines'].values)\n","  else:\n","    try:\n","      return np.random.choice(data_tr.loc[data_tr['username']!=this_row['username']]['flines'].values)\n","    except:\n","      print(this_row['username'])\n","      print(data_tr.loc[data_tr['username']!=this_row['username']]['flines'].values)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VyyKpngr07Nz","colab_type":"code","outputId":"9c22300f-bf49-4975-89bd-966c4d42366c","executionInfo":{"status":"ok","timestamp":1566884471711,"user_tz":-480,"elapsed":538534,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"04717068953379374964"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# apply func to datasets - train\n","same_file = data_tr.groupby('username').head(4).reset_index()['full_path']\n","data_tr['if_same'] = data_tr['full_path'].isin(same_file)\n","\n","data_tr['flines_2'] = data_tr.apply(lambda row: func(row), axis=1)\n","data_tr = data_tr.sample(frac=1, random_state=2)\n","print(i)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[31264]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KO93HRfRIF_P","colab_type":"code","colab":{}},"source":["# apply datasets - train\n","data_tr_csv = data_tr[['flines', 'flines_2', 'if_same']]\n","data_tr_csv.columns = ['sentences1', 'sentences2', 'is_similar']\n","data_tr_csv['is_similar'] = data_tr_csv['is_similar'].astype(int)\n","data_tr_csv.to_csv('data/exp1/cpp_train.csv')\n"," \n","print(pd.read_csv('data/exp1/cpp_train.csv')[['sentences1', 'sentences2', 'is_similar']])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XEUHTDUSmaO4","colab_type":"text"},"source":["========================== prepare sample data(whole) ========================"]},{"cell_type":"code","metadata":{"id":"3KeNcqvzmqMC","colab_type":"code","colab":{}},"source":["os.chdir('/content/drive/My Drive/Projects/1_Verification_Sourcecode_Siamese/data_gen/siamese/deep-siamese-text-similarity')\n","\n","data = pd.read_csv('train_snli.txt', sep=\"\\t\", header=None)\n","print(data.shape)\n","data.columns = ['sentences1', 'sentences2', 'is_similar']\n","ndata = data[['sentences1', 'sentences2', 'is_similar']]\n","print(ndata.shape)\n","ndata.to_csv('../../siamese/lstm-siamese-text-similarity/data/whole_sample_data.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"grjSQGAOMcpI","colab_type":"text"},"source":["============================== train model ==============================\n"]},{"cell_type":"code","metadata":{"id":"Qc6ZEqW1adq0","colab_type":"code","outputId":"abd66b4e-4af6-423b-ca08-5735a3ca89e2","executionInfo":{"status":"ok","timestamp":1580433853272,"user_tz":300,"elapsed":6458,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["os.chdir('/content/drive/My Drive/Projects/1_Verification_Sourcecode_Siamese/data_gen/siamese/lstm-siamese-text-similarity')\n","!ls data/exp1\n","!ls checkpoints/tokenizer"],"execution_count":2,"outputs":[{"output_type":"stream","text":["cpp_train.csv  c_train.csv  java_shishi.csv  java_train.csv\n","cpp_tokenizer.pickle  java_tokenizer.pickle\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Bu-ihA-wMbvv","colab_type":"code","outputId":"ea7bfc68-ca1b-404a-8d12-2a7d929b7b11","executionInfo":{"status":"ok","timestamp":1580434841153,"user_tz":300,"elapsed":849861,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# Train: lstm-siamese-text-similarity\n","os.chdir('/content/drive/My Drive/Projects/1_Verification_Sourcecode_Siamese/data_gen/siamese/lstm-siamese-text-similarity')\n","!python train.py data/exp1/java_train.csv java\n","#!python train.py data/exp1/cpp_train.csv cpp"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n","WARNING:root:Limited tf.compat.v2.summary API due to missing TensorBoard installation.\n","java\n","(23784, 4)\n","(23784, 4)\n","Embedding matrix shape: (482324, 128)\n","Null word embeddings: 1\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:174: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:174: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:181: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:181: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n","\n","2020-01-31 01:29:59.423495: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 AVX512F FMA\n","2020-01-31 01:29:59.427264: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2000155000 Hz\n","2020-01-31 01:29:59.427442: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x2e05f80 executing computations on platform Host. Devices:\n","2020-01-31 01:29:59.427470: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): <undefined>, <undefined>\n","2020-01-31 01:29:59.436673: W tensorflow/compiler/jit/mark_for_compilation_pass.cc:1412] (One-time warning): Not using XLA:CPU for cluster because envvar TF_XLA_FLAGS=--tf_xla_cpu_global_jit was not set.  If you want XLA:CPU, either set that envvar, or use experimental_jit_scope to enable XLA:CPU.  To confirm that XLA is active, pass --vmodule=xla_compilation_cache=1 (as a proper command-line flag, not via TF_XLA_FLAGS) or set the envvar XLA_FLAGS=--xla_hlo_profile.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","out_x1.shape\n","(?, 128)\n","out_x2.shape\n","(?, 128)\n","leaks_train.shape\n","(21406, 2)\n","leaks_input.shape\n","(?, 2)\n","leaks_dense.shape\n","(?, 32)\n","out_x with leak.shape\n","(?, 160)\n","(?, 160)\n","cos_sim.shape\n","(?, 1)\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/nn_impl.py:180: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/nn_impl.py:180: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","Train on 21406 samples, validate on 2378 samples\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/callbacks.py:850: The name tf.summary.merge_all is deprecated. Please use tf.compat.v1.summary.merge_all instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/callbacks.py:850: The name tf.summary.merge_all is deprecated. Please use tf.compat.v1.summary.merge_all instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/callbacks.py:853: The name tf.summary.FileWriter is deprecated. Please use tf.compat.v1.summary.FileWriter instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/callbacks.py:853: The name tf.summary.FileWriter is deprecated. Please use tf.compat.v1.summary.FileWriter instead.\n","\n","Epoch 1/200\n","21406/21406 [==============================] - 53s 2ms/step - loss: 0.6347 - acc: 0.6382 - val_loss: 0.5930 - val_acc: 0.6358\n","Epoch 2/200\n","21406/21406 [==============================] - 50s 2ms/step - loss: 0.5876 - acc: 0.6633 - val_loss: 0.5680 - val_acc: 0.6934\n","Epoch 3/200\n","21406/21406 [==============================] - 49s 2ms/step - loss: 0.5586 - acc: 0.6991 - val_loss: 0.5555 - val_acc: 0.7044\n","Epoch 4/200\n","21406/21406 [==============================] - 49s 2ms/step - loss: 0.5320 - acc: 0.7168 - val_loss: 0.5616 - val_acc: 0.7128\n","Epoch 5/200\n","21406/21406 [==============================] - 48s 2ms/step - loss: 0.5124 - acc: 0.7316 - val_loss: 0.5372 - val_acc: 0.7136\n","Epoch 6/200\n","21406/21406 [==============================] - 48s 2ms/step - loss: 0.5020 - acc: 0.7404 - val_loss: 0.5403 - val_acc: 0.7283\n","Epoch 7/200\n","21406/21406 [==============================] - 47s 2ms/step - loss: 0.4899 - acc: 0.7464 - val_loss: 0.5361 - val_acc: 0.7283\n","Epoch 8/200\n","21406/21406 [==============================] - 48s 2ms/step - loss: 0.4964 - acc: 0.7430 - val_loss: 0.5380 - val_acc: 0.7271\n","Epoch 9/200\n","21406/21406 [==============================] - 47s 2ms/step - loss: 0.4853 - acc: 0.7511 - val_loss: 0.5386 - val_acc: 0.7347\n","Epoch 10/200\n","21406/21406 [==============================] - 46s 2ms/step - loss: 0.4712 - acc: 0.7591 - val_loss: 0.5347 - val_acc: 0.7330\n","Epoch 11/200\n","21406/21406 [==============================] - 47s 2ms/step - loss: 0.4626 - acc: 0.7655 - val_loss: 0.5439 - val_acc: 0.7405\n","Epoch 12/200\n","21406/21406 [==============================] - 46s 2ms/step - loss: 0.4524 - acc: 0.7706 - val_loss: 0.5560 - val_acc: 0.7380\n","Epoch 13/200\n","21406/21406 [==============================] - 46s 2ms/step - loss: 0.4479 - acc: 0.7750 - val_loss: 0.5473 - val_acc: 0.7405\n","./checkpoints/model/java_1580434201/lstm_128_64_0.17_0.25.h5\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Ws4fwEo4lMWI","colab_type":"text"},"source":["============================== test model ==============================\n"]},{"cell_type":"code","metadata":{"id":"iHgsJq0C8NMa","colab_type":"code","outputId":"e6c52a21-8585-4957-dc23-ad70e0f86f88","executionInfo":{"status":"ok","timestamp":1580435311508,"user_tz":300,"elapsed":1696,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}},"colab":{"base_uri":"https://localhost:8080/","height":321}},"source":["import keras\n","from operator import itemgetter\n","from keras.models import load_model\n","from inputHandler import word_embed_meta_data, create_test_data\n","from config import siamese_config\n","import pandas as pd\n","import pickle\n","from keras.models import Model\n","import numpy as np\n","import tensorflow as tf"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n","  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n","WARNING:root:Limited tf.compat.v2.summary API due to missing TensorBoard installation.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"aFpFhEL18eeo","colab_type":"code","colab":{}},"source":["#load tokenizer & model\n","with open('checkpoints/tokenizer/java_tokenizer.pickle', 'rb') as handle:\n","#with open('checkpoints/tokenizer/cpp_tokenizer.pickle', 'rb') as handle:\n","  tokenizer = pickle.load(handle)\n","model = load_model('./checkpoints/model/java_1580434201/lstm_128_64_0.17_0.25.h5')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6qujt35GPII0","colab_type":"code","outputId":"da5a85ef-35d2-488b-d930-acfc687ac434","executionInfo":{"status":"ok","timestamp":1580435349445,"user_tz":300,"elapsed":1392,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["# load test data\n","data_te = pd.read_csv('../../data_GCJ/c2v/Exp1-compare_result_of_each_language-use_data_across_all_years/java/test_v_authors.csv')\n","#data_te = pd.read_csv('../../data_GCJ/c2v/Exp1-compare_result_of_each_language-use_data_across_all_years/cpp/test_v_authors.csv')\n","print(data_te.shape)\n","\n","# load corresponding author names from train data\n","data_tr = pd.read_csv('../../data_GCJ/c2v/Exp1-compare_result_of_each_language-use_data_across_all_years/java/train.csv')\n","#data_tr = pd.read_csv('../../data_GCJ/c2v/Exp1-compare_result_of_each_language-use_data_across_all_years/cpp/train.csv')\n","print(data_tr.columns.values)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["(2973, 15)\n","['Unnamed: 0' 'Unnamed: 0.1' 'year' 'round' 'username' 'task' 'solution'\n"," 'file' 'full_path' 'flines' 'file_type']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mnaf9GgP3WDR","colab_type":"code","colab":{}},"source":["# function: prediction of representations\n","from sklearn.metrics.pairwise import cosine_similarity\n","def pred_rep(x_in, y_in):\n","  x = [x_in] * 8\n","  #create sentence pair\n","  sentences_pairs = [(x1, x2) for x1, x2 in zip(x, y_in)]\n","  test_data_x1, test_data_x2, leaks_test = create_test_data(tokenizer,sentences_pairs, siamese_config['MAX_SEQUENCE_LENGTH'])\n","  # get intermediate layer output\n","  \n","  #intermediate_output_1 = intermediate_layer_model_1.predict([test_data_x1, test_data_x2, leaks_test], verbose=1)\n","  #intermediate_output_2 = intermediate_layer_model_2.predict([test_data_x1, test_data_x2, leaks_test], verbose=1)\n","\n","  intermediate_output_1 = intermediate_layer_model_1.predict([test_data_x1, test_data_x2], verbose=1)\n","  intermediate_output_2 = intermediate_layer_model_2.predict([test_data_x1, test_data_x2], verbose=1)\n","\n","  #cos = keras.layers.dot([intermediate_output_1, intermediate_output_2], axes=1, normalize=True)\n","  cos = tf.reduce_sum(intermediate_output_1 * intermediate_output_2, axis=-1)\n","  cos /= tf.norm(intermediate_output_1, axis=-1) * tf.norm(intermediate_output_2, axis=-1)  \n","  #cos = tf.reduce_mean(cos)\n","  print(cos)\n","\n","  return cos"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iwk_hUb8uTtJ","colab_type":"code","colab":{}},"source":["intermediate_layer_model_1 = Model(inputs=model.input, outputs=model.get_layer('lstm').get_output_at(0))\n","intermediate_layer_model_2 = Model(inputs=model.input, outputs=model.get_layer('lstm').get_output_at(1))\n","\n","data_te['sim_rep'] = data_te.apply(lambda row: pred_rep(row['flines'], data_tr.loc[(data_tr['username']==row['hepo_author'])&(data_tr['full_path']!=row['full_path'])]['flines']), axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"f0lPgriIqti6","colab_type":"code","colab":{}},"source":["with tf.Session() as sess:\n","  data_te['sim_rep_eval'] = data_te['sim_rep'].apply(lambda ele: sess.run(ele))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XdJqdR5dJjxP","colab_type":"code","colab":{}},"source":["# function: prediction of whole model\n","import datetime\n","from sklearn.metrics.pairwise import cosine_similarity\n","global tm3\n","tm3 = []\n","\n","def pred(x_in, y_in):\n","  x = [x_in] * 8\n","  #create sentence pair\n","  sentences_pairs = [(x1, x2) for x1, x2 in zip(x, y_in)]\n","  test_data_x1, test_data_x2, leaks_test = create_test_data(tokenizer,sentences_pairs, siamese_config['MAX_SEQUENCE_LENGTH'])\n","  # get model output\n","  #start_time = datetime.datetime.now()\n","  preds = model.predict([test_data_x1, test_data_x2, leaks_test], verbose=1).ravel()\n","  #preds = model.predict([test_data_x1, test_data_x2], verbose=1).ravel()\n","\n","  #delta_time = datetime.datetime.now() - start_time\n","  #tm3.append(delta_time.total_seconds() * 1000)\n","  print(np.mean(preds))\n","  return (np.mean(preds))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XV3epRNCExCb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":327},"outputId":"99a25903-a051-46b6-8611-0f74f356e1b1","executionInfo":{"status":"error","timestamp":1580436218456,"user_tz":300,"elapsed":559,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}}},"source":["data_te['sim_pred'] = data_te.apply(lambda row: pred(row['flines'], data_tr.loc[(data_tr['username']==row['hepo_author'])&(data_tr['full_path']!=row['full_path'])]['flines']), axis=1)"],"execution_count":15,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-4e837b52d6c5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata_te\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sim_pred'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata_te\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mrow\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'flines'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_tr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_tr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'username'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'hepo_author'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m&\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_tr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'full_path'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m!=\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'full_path'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'flines'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, axis, broadcast, raw, reduce, result_type, args, **kwds)\u001b[0m\n\u001b[1;32m   6012\u001b[0m                          \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6013\u001b[0m                          kwds=kwds)\n\u001b[0;32m-> 6014\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6015\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6016\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapplymap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mget_result\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    140\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_raw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_empty_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m         \u001b[0;31m# compute the result using the series generator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_series_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    249\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m         \u001b[0;31m# wrap results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply_series_generator\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    275\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    276\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries_gen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 277\u001b[0;31m                     \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    278\u001b[0m                     \u001b[0mkeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    279\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-15-4e837b52d6c5>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(row)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata_te\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sim_pred'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata_te\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mrow\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'flines'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_tr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_tr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'username'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'hepo_author'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m&\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_tr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'full_path'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m!=\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'full_path'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'flines'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-13-1b47a3eb6d8c>\u001b[0m in \u001b[0;36mpred\u001b[0;34m(x_in, y_in)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;31m# get model output\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0;31m#start_time = datetime.datetime.now()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m   \u001b[0mpreds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtest_data_x1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_data_x2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleaks_test\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m   \u001b[0;31m#preds = model.predict([test_data_x1, test_data_x2], verbose=1).ravel()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps)\u001b[0m\n\u001b[1;32m   1147\u001b[0m                              'argument.')\n\u001b[1;32m   1148\u001b[0m         \u001b[0;31m# Validate user data.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1149\u001b[0;31m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_standardize_user_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1150\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstateful\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1151\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36m_standardize_user_data\u001b[0;34m(self, x, y, sample_weight, class_weight, check_array_lengths, batch_size)\u001b[0m\n\u001b[1;32m    749\u001b[0m             \u001b[0mfeed_input_shapes\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    750\u001b[0m             \u001b[0mcheck_batch_axis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# Don't enforce the batch size.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 751\u001b[0;31m             exception_prefix='input')\n\u001b[0m\u001b[1;32m    752\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    753\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training_utils.py\u001b[0m in \u001b[0;36mstandardize_input_data\u001b[0;34m(data, names, shapes, check_batch_axis, exception_prefix)\u001b[0m\n\u001b[1;32m    136\u001b[0m                             \u001b[0;34m': expected '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' to have shape '\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m                             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' but got array with shape '\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 138\u001b[0;31m                             str(data_shape))\n\u001b[0m\u001b[1;32m    139\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: ('Error when checking input: expected input_3 to have shape (2,) but got array with shape (3,)', 'occurred at index 0')"]}]},{"cell_type":"code","metadata":{"id":"vj8Xm_5784iM","colab_type":"code","colab":{}},"source":["data_te.to_csv('result/cpp_atten_leak.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OQ33QPzPnWJe","colab_type":"code","colab":{}},"source":["test_time = data_te.apply(lambda row: data_tr.loc[(data_tr['username']==row['hepo_author'])&(data_tr['full_path']!=row['full_path'])]['flines'].iloc[0], axis=1)\n","test_time_df = pd.DataFrame(test_time)\n","test_time_df = pd.concat([test_time_df, data_te['flines']], axis=1)\n","test_time_df.columns = ['fline1', 'fline2']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZKmYmYO7pT5Y","colab_type":"code","colab":{}},"source":["####### compute testing time #######\n","#create sentence pair\n","sentences_pairs = [(x1, x2) for x1, x2 in zip(test_time_df['fline1'], test_time_df['fline2'])]\n","test_data_x1, test_data_x2, leaks_test = create_test_data(tokenizer,sentences_pairs, siamese_config['MAX_SEQUENCE_LENGTH'])\n","# get model output\n","print('st')\n","pp = model.predict([test_data_x1, test_data_x2, leaks_test], verbose=1).ravel()\n","start_time = datetime.datetime.now()\n","preds = model.predict([test_data_x1, test_data_x2, leaks_test], verbose=1).ravel()\n","delta_time = datetime.datetime.now() - start_time\n","tm.append(delta_time.total_seconds() * 1000)\n","print(preds.shape)\n","print(delta_time.total_seconds() * 1000)\n","\n","for i in range(len(tm)):\n","  if tm[i] > 200:\n","    print(tm[i])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HOoySGUVQO4A","colab_type":"code","outputId":"0031494e-fc0f-42f7-f5da-f8a8d44a3d51","executionInfo":{"status":"ok","timestamp":1580436057800,"user_tz":300,"elapsed":521,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}},"colab":{"base_uri":"https://localhost:8080/","height":313}},"source":["from sklearn import metrics\n","from matplotlib import pyplot\n","\n","#fpr, tpr, thresholds = metrics.roc_curve(data_te['label'], data_te['sim_rep_eval'], pos_label=1)\n","fpr, tpr, thresholds = metrics.roc_curve(data_te['label'], data_te['sim_pred'], pos_label=1)\n","\n","auc_score = metrics.auc(fpr, tpr)\n","print(len(fpr))\n","print('auc score:' + str(round(auc_score, 4)))\n","\n","    \n","x = np.arange(len(fpr)) / float(len(fpr))\n","y = np.arange(len(fpr)) / float(len(fpr))\n","\n","pyplot.plot(fpr, tpr)\n","pyplot.plot(x, y)\n","pyplot.xlabel('false positive rate')\n","pyplot.ylabel('true positive rate')\n","pyplot.show()"],"execution_count":10,"outputs":[{"output_type":"stream","text":["725\n","auc score:0.9042\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nBCIiRe7/AZTtmH+Xl36vAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"bAl-ZljVEf7j","colab_type":"code","outputId":"6765892e-c9b6-413f-9e30-0ab58a5d9f40","executionInfo":{"status":"ok","timestamp":1568976958165,"user_tz":-480,"elapsed":1869,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"04717068953379374964"}},"colab":{"base_uri":"https://localhost:8080/","height":318}},"source":["from sklearn import metrics\n","from matplotlib import pyplot\n","\n","fpr, tpr, thresholds = metrics.roc_curve(result_java['label'], result_java['sim'], pos_label=1)\n","auc_score = metrics.auc(fpr, tpr)\n","print(len(fpr))\n","print('auc score:' + str(round(auc_score, 4)))\n","\n","    \n","x = np.arange(len(fpr)) / float(len(fpr))\n","y = np.arange(len(fpr)) / float(len(fpr))\n","\n","pyplot.plot(fpr, tpr)\n","pyplot.plot(x, y)\n","pyplot.xlabel('false positive rate')\n","pyplot.ylabel('true positive rate')\n","pyplot.show()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["971\n","auc score:0.8484\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYUAAAEKCAYAAAD9xUlFAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3XeYVdX1xvHvoosgoqAoiCBiQY0N\nQcWCHQsQY0NCrAmJil1jR0SN3WA3GP2psWDUREYEsYFEBAQEUbAEUCmCSBVREGbW7499mVzGKQeY\nc88t7+d55uGWc+euA8N9Z599ztrm7oiIiADUSLoAERHJHgoFEREppVAQEZFSCgURESmlUBARkVIK\nBRERKaVQEBGRUgoFEREppVAQEZFStZIuYH01adLEW7VqlXQZIiI5ZeLEiQvdvWlV2+VcKLRq1YoJ\nEyYkXYaISE4xs6+jbKfDRyIiUkqhICIipRQKIiJSSqEgIiKlFAoiIlIqtlAwsyfMbIGZfVLB82Zm\n95vZdDObYmb7xFWLiIhEE+dI4UmgSyXPHwu0TX31Bh6JsRYREYkgtusU3H2UmbWqZJPuwNMe1gMd\na2abm9k27j4vrppERLLBc+NmMXjy3Mjb1y1Zyb6rxrK0TTdu7LpbjJUle/Fac2B22v05qcd+EQpm\n1pswmqBly5YZKU5ECs/6flhvqHFfLgagY+stqtx2t1WT6b3sPrYqns8jP/0KyN9QiMzdBwIDAdq3\nb+8JlyMieaC8AFifD+uN0bH1FnTfqzk9O1byS+5PS+HNG+DDp2GLNtBtCBe0OijWuiDZUJgLbJd2\nv0XqMRGRjRLlN/7yAiDSh3UmfDYUXrsMfvgWOl0Mna+B2ptk5K2TDIUioI+ZDQI6Ass0nyAiFVmf\nQztRfuPPmgBI98N3MOzPMPVfsPXu0OM5aJ7ZEzNjCwUzex7oDDQxsznAjUBtAHd/FBgKHAdMB34E\nzo6rFhHJHRV9+K/PoZ2s/MCvjDtM+Se8fhX8vAIOux4OugRq1s54KXGefXR6Fc87cEFc7y8i2WF9\nJ28r+vDPuQ/6qJbNgSGXwn/fgBb7QbcHYatdEisnJyaaRSQ7bMjZOes7eZu3H/5llZTAxCfgzX7g\nxdDldujQG2rUTLQshYKIRP6w35CzcwrmQ359LJoBRRfC16Nhh87Q9T5o3CrhogKFgkiB2ZhTMfUB\nv5GK18CYB2HkbVCrLnR/CPb6LZglXVkphYJInisbAll9KmY+m/8xDL4A5n0Eu5wAx98DDZslXdUv\nKBREctDGnJ6pAMiwNatg1F3w3l9hk8ZwylPQrntWjQ7SKRREckR6EOT16Zn5ZPYHMLgPLPwc9jwd\njvkL1I/3aumNpVAQySKVjQDSg0Af9Flu1Q/wzi0w7lFo1AJ++zK0PTLpqiJRKIgkKMrx/rUUBDli\nxjvw6sWwdFY4xfSIvlC3YdJVRaZQEEnA2jDQ8f488tMSeON6mPQMbNkWzn4dtj8g6arWm0JBJEZR\nWjYoBPLAp6/Ca5fDioVw0GVw6FVQu17SVW0QhYJINYp6OEhhkCeWfwvDroRpg6HZHtDzn7DtXklX\ntVEUCiIboaoQ0Id/nnKHjwbB61fD6p/CvMGBFyXSwK66KRREIopyJbBCoAAsnQWvXgIz3obtOoYG\ndk13SrqqaqNQEClH1FYQCoECUlICEx6Ht/qFkcKxd8F+v4caNZKurFopFETSVHRW0NrbCoACtfC/\noYHdrDHQ5gjoOgA2z8+fA4WCFLyKrhRWAAjFq+H9+2HkHWE5zF8/Eq5MztIWFdVBoSAFp7LJYYWB\nlJr3UWhRMX9K6FV07F3QcOukq4qdQkEKQmV9gxQEso7VK+HdO2D0fVB/Szj1H9CuW9JVZYxCQfJa\neXMECgGp0KyxYXSw6L+wVy845pbQ2bSAKBQkL5UXBgoCqdCq5fB2f/jgMdh8O+j1L9jxiKSrSoRC\nQfJCZfMECgOp1PS3wnUHy+ZAxz/C4TdA3QZJV5UYhYLkJF1JLBvtx8Uw/Fr46HloshOcMxxadky6\nqsQpFCQnKASkWk19BYZeETqbHnwFHHJlzjawq24KBclKCgGJxfL5IQw+fRW22TPMHWzzq6SryioK\nBck6z42bxbX//hhQCEg1cYfJz4bDRatXwpH94IALoaY+AsvS34hkhfKuI/jLiXsoBGTjLfkqTCTP\nHAEtD4RuD0CTHZOuKmspFCQxFV1QplGBVIuS4nCK6ds3gdWA4++Bfc/JuwZ21U2hIBmnC8okdt99\nHi5Cm/MB7HgUnPDXcP2BVEmhIBlVdr5AQSDVqng1jB4A794JdTaFEwfCr07N6wZ21U2hILHTfIFk\nxDeTwujg209gtxNDA7sGTZOuKufEGgpm1gW4D6gJ/N3dby/zfEvgKWDz1DZXu/vQOGuSzNB8gWTM\n6p9g5O3w/gOwaVM47VnY9YSkq8pZsYWCmdUEHgKOAuYA482syN2npW12PfBPd3/EzNoBQ4FWcdUk\n8dN8gWTUV6PD4jeLZ8A+Z8BRN8MmmyddVU6Lc6TQAZju7jMBzGwQ0B1IDwUHNkvdbgR8E2M9EiM1\noJOMWvl9WBZzwuOw+fZwxmDYoXPCReWHOEOhOTA77f4coGxjkX7AG2Z2IbApcGSM9UhMNHksGfXF\nGzDkUvh+Lux/ARx+XZhUlmqR9ETz6cCT7n6PmR0A/MPMdnf3kvSNzKw30BugZUt92GQDTR5Lxq1Y\nBMOvgSkvQNNd4Nw3Ybv9kq4q78QZCnOB9BODW6QeS3cu0AXA3ceYWT2gCbAgfSN3HwgMBGjfvr3H\nVbBEU3ZkoNGBxModpv4bhl4JK5fCoVfBwZdDrbpJV5aX4gyF8UBbM2tNCIMeQM8y28wCjgCeNLNd\ngXrAdzHWJBuh7LyBRgYSu+/nwWuXw+evwbZ7Q7fB0Gz3pKvKa7GFgruvMbM+wHDC6aZPuPtUM+sP\nTHD3IuBy4DEzu5Qw6XyWu2skkIU0byAZ5Q4fPg1v3ADFq+DoW6DjeWpglwGx/g2nrjkYWuaxvmm3\npwGd4qxBNpzmDSQRi7+EVy+CL0fB9gdBt/thyzZJV1UwFLtSLs0bSMaVFMO4R+Htm6FGLThhAOxz\nphrYZZhCQYCKF7XRyEAyYsGnoUXF3AnQ9pjQwK5R86SrKkgKBQFg8OS5TJv3Pe22CdcSamQgGbHm\nZ3jvrzDqLqi3GZz0OOx+khrYJUihUODWjhDWBsILfzwg6ZKkUMydGEYHC6bBHqdAl9th0yZJV1Xw\nFAoFqKJmdd330nBdMuDnH2HErTD2YWjQDE4fBDsfm3RVkqJQKBDqWipZ4cv/hAZ2S76Efc+Go26C\neo2SrkrSKBQKgM4kksStXAZv9oWJT0Lj1nDmq9D6kKSrknIoFPKYrkCWrPD566GB3Q/z4cALofO1\nUKd+0lVJBRQKeaay+QIFgmTUioUw7Cr45CXYqh2c9gy02DfpqqQKCoU8ocVtJGu4wycvw7A/h3UP\nOl8LB10KteokXZlEoFDIA+pLJFlj2Vx47TL44nVo3h66Pwhb7Zp0VbIeFAo5Lj0QNGcgiSkpgQ+f\nhDf6QskaOOYv0PFPUKNm0pXJeqoyFMzMgN8CO7h7fzNrCTRz9w9ir04qpUCQrLBoBrx6MXz1n3BG\nUdf7YYvWSVclGyjKSOFhoAQ4HOgPLAdeBrTkUQLUuVSyRvGacAHaiFuhZp0QBvucoRYVOS5KKHR0\n933MbBKAuy8xM80YZZgmkiWrfDs1tKj45kPY+Tg4/h7YbNukq5JqECUUVptZTcIiOJhZU8LIQTJE\nE8mSNdasgv/cE77qbQ4n/x/sdqJGB3kkSijcD/wb2MrMbgVOBm6ItSpZx9rDRTpMJImaPR6K+sB3\nn8GvTgsN7OpvkXRVUs2qDAV3f9bMJhLWUjbg1+7+aeyVyTodTDu23kKBIMn4eQW8k2pgt9m20PNF\n2OnopKuSmEQ5++gf7v474LNyHpMYpbe0VgdTScTMkVB0ESz9GtqfC0f2C+seSN6Kcvhot/Q7qfkF\nXaseI61xIIn7aSm8eQN8+DRs0QbOGgqttJx6IagwFMzsGuBaYBMz+55w6AjgZ2BgBmorSOVNKotk\n1GevwZDLYMUC6HQxdL4Gam+SdFWSIRWGgrvfBtxmZre5+zUZrKlg6WI0SdQPC0K/oqn/hq13h9Of\nh+b7JF2VZFiUieZrzKwx0Baol/b4qDgLKzQKBEmMO0z5J7x+VZhUPvx66HQJ1KyddGWSgCgTzb8H\nLgZaAJOB/YExhCucpRooECQxS2eHtQ6mvwktOoQGdk13TroqSVCUieaLCS0txrr7YWa2C/CXeMsq\nHAoESURJCUx8At68EbwEutwBHf6gBnYSKRRWuvtKM8PM6rr7Z2amXyWqiS5Mk4xbOD2skzzrfdih\nM3S9Dxq3SrgoyRZRQmGOmW0OvAK8aWZLgK/jLaswPDduFuO+XKwL0yQzitfAmAdh5G1Qqy50fwj2\n+q1aVMg6okw0n5i62c/MRgCNgNdjraoApB820mmnErv5H8PgC2DeR7DLCaGBXcNmSVclWajSUEhd\nqDbV3XcBcPd3M1JVntM8gmTM6pUw6i4YPQA22QJOfRradU+6KslilYaCuxeb2edm1tLdZ2WqqHyn\neQTJiFnjQgO7hV/Anj3hmFvVwE6qFGVOoTEw1cw+AFasfdDdu8VWVZ5SgzvJiFU/wDs3w7i/QaMW\n0Otl2PHIpKuSHBElFDa4TbaZdQHuA2oCf3f328vZ5lSgH2G9ho/cveeGvl+2U4M7id2Md8LSmEtn\nQYfecERfqNsw6aokh0SZaN6geYTUfMRDwFHAHGC8mRW5+7S0bdoC1wCdUiu6bbUh75UL0s80UoM7\nqXY/LYHh18PkZ2DLtnD267C9fs5k/UUZKWyoDsB0d58JYGaDgO7AtLRt/gA85O5LANx9QYz1JGrt\nPIJGCFLtphXB0CtgxUI46DI49CqoXa/q14mUI85QaA7MTrs/B+hYZpudAMxsNOEQUz93/8XprmbW\nG+gN0LJl7hyHXzuHAGgeQarf8m9DGHxaBM32gN++CNvsmXRVkuNqRNnIzDaJ6SrmWoRGe52B04HH\nUhfKrcPdB7p7e3dv37Rp0xjKiMfaOQRA8whSfdxh8nPwUAf4YniYN/jDCAWCVIsoDfG6AncDdYDW\nZrYX0D/C2Udzge3S7rdIPZZuDjDO3VcDX5rZF4SQGB+x/qylOQSJxdJZ8OolMONt2G5/6PYANN0p\n6aokj0QZKfQjzA8sBXD3yUDrCK8bD7Q1s9ZmVgfoARSV2eYVwigBM2tCOJw0M0rh2U5zCFKtSkpg\n3EB4aH+YNRaOvQvOHqZAkGoXZU5htbsvs3X7o3hVL3L3NWbWBxhOmC94wt2nmll/YIK7F6WeO9rM\npgHFwJXuvmi99yLLqKeRVKvvvggN7GaPhTZHQNcBsLl+riQeUUJhqpn1BGqmTiG9CHg/yjd396HA\n0DKP9U277cBlqa+8oJ5GUm2KV8Po++DdO6B2ffj1o7BnDzWwk1hFCYULgeuAVcBzhN/ub4mzqFym\nFhZSLeZ9FBrYzf849Co67m5okLeX8UgWiRIKu7j7dYRgkErosJFstNUr4d3bYfT9sGkTOPUf0E4d\nZSRzooTCPWbWDHgJeMHdP4m5ppykw0ay0b4eExrYLZoOe/WCY26BTRonXZUUmChtLg5LhcKpwN/M\nbDNCOOgQUhodNpINtmo5vHUTjH8sTCD/7t/QRkugSzIiXbzm7vPd/X7gT8BkoG8VLykoOmwkG+y/\nb8HDB8D4v0PHP8F5YxQIkqgoF6/tCpwGnAQsAl4ALo+5rpyhw0ayQX5cDMOvhY+ehyY7wTnDoWXZ\nLjAimRdlTuEJQhAc4+7fxFxPTtEKarLe3GHa4NCz6KclcMiV4atW3aQrEwGizSmoR0MFNI8g62X5\nfHjtcvhsCGyzV5g7aLZH0lWJrKPCUDCzf7r7qWb2MetewWyE685+FXt1WUzzCBKZO0x+NhwuWrMK\njrwJDugDNeNsUiyyYSr7qbw49ecJmSgk16i3kUSy5KuwEtrMkdDywNDArsmOSVclUqEKQ8Hd56Vu\nnu/uV6U/Z2Z3AFf98lWFQaMEqVJJMXwwEN7uD1YDjr8H9j0HakQ64U8kMVF+Qo8q57Fjq7uQXKGz\njaRKCz6DJ7rA61fD9p3g/LGw3+8VCJITKptTOA84H9jBzKakPdUQGB13YdlIZxtJpYpXw3sDYNSd\nUKcB/OYx2OMUNbCTnFLZnMJzwDDgNuDqtMeXu/viWKvKQgoEqdQ3k2BwH/j2E9jtN3DsndAgd1YJ\nFFmrslBwd//KzC4o+4SZbVFIwaBAkAqt/glG3gbvPwCbbgU9noNdjk+6KpENVtVI4QRgIuGU1PQx\nsAM7xFhXVtH1CFKur96Dootg8QzY5ww46mbY5BdLjIvklMrOPjoh9WeUpTfzls40kl9Y+T28dSNM\neAIat4IzBsMOnRMuSqR6ROl91AmY7O4rzKwXsA8wwN1nxV5dFtD1CLKOL96AIZfA8nnhArTDroU6\nmyZdlUi1iXKO3CPAj2a2J6ER3gzgH7FWlWU0ShBWLIKX/wDPnQJ1G8K5b8IxtyoQJO9Euc5+jbu7\nmXUHHnT3x83s3LgLE8kK7jD1XzD0z7ByKRx6NRx8mRrYSd6KEgrLzewa4HfAwWZWA6gdb1nZIX0+\nQQrQ99+EBnafD4Vt94buRbD1bklXJRKrKKFwGtATOMfd55tZS+CueMtKnq5cLmDu8OFT8MYNUPwz\nHH0LdDxPDeykIERpnT3fzJ4F9jOzE4AP3P3p+EtLlk5DLVCLZ4bTTL/6D7Q6GLreB1u2SboqkYyp\ncqLZzE4FPgBOIazTPM7MTo67sGygCeYCUlIM7z8IDx8I8z6CEwbAGUUKBCk4UcbD1wH7ufsCADNr\nCrwFvBRnYSIZ8+00KOoDcyfCTl3g+HuhkQ4ZSmGKEgo11gZCyiKincqaszTBXCDW/Azv3Quj7oZ6\nm8FJj8PuJ6mBnRS0KKHwupkNB55P3T8NGBpfScnSBHOBmDMxjA4WTAudTLvcDps2SboqkcRFmWi+\n0sx+AxyUemigu/873rKSownmPPfzjzDiVhj7MDRoBqcPgp0LdnkQkV+Ieo7d+0AxUAKMj6+c7KAJ\n5jz15SgoujAskbnv2XDUTVCvUdJViWSVKGcf/Z5w9tGJwMnAWDM7J+7CkrB2LkHyzMplYZ3kp7oC\nBmcOga4DFAgi5YgyUrgS2NvdFwGY2ZaEkcMTVb3QzLoA9wE1gb+7++0VbHcS4Wym/dx9QsTaq5Xm\nEvLU58NgyKXww7dw4IXQ+VqoUz/pqkSyVpRQWAQsT7u/PPVYpcysJvAQYY3nOcB4Myty92lltmsI\nXAyMi1p0HDSXkGdWLIRhV8EnL8FWu0GPZ6H5vklXJZL1ooTCdMIFa4MJi+t0B6aY2WUA7n5vBa/r\nAEx395kAZjYo9dppZba7GbiDMCJJhNZMyCPu8PFLMOzPsGp5GBkcdCnUqpN0ZSI5IUoozEh9rTU4\n9WfDKl7XHJiddn8O0DF9AzPbB9jO3V8zs0RCQYeN8siyOTDkMvjvcGjeHro/CFvtmnRVIjklyimp\nN8Xxxqluq/cCZ0XYtjfQG6Bly+r9TV6HjfJASQl8+CS80Re8GI65DTr+EWrUTLoykZwTZ9vHucB2\nafdbpB5bqyGwOzDSwhWkzYAiM+tWdrLZ3QcCAwHat2/v1V2oDhvlsEUzQgO7r9+D1oeGBnZbFPQK\nsiIbJc5QGA+0NbPWhDDoQWjBDYC7LwNKLyE1s5HAFZk8+0jtLHJY8ZpwAdqIW6FmXej2AOz9O7Wo\nENlIsYWCu68xsz7AcMIpqU+4+1Qz6w9McPeiuN47Kq2/nKPmfxJaVHwzCXY+Ho6/BzbbJumqRPJC\nlaFgZjsR1mne2t13N7NfAd3c/ZaqXuvuQynTJ8nd+1awbedIFVczHTrKIWtWheZ1790L9TaHk/8P\ndjtRowORahSl2+ljwDXAagB3n0I4FCSSObPHw98OgVF3hk6mfcbD7r9RIIhUsyiHj+q7+we27n++\nNTHVI7Kun1fAO7fA2Edgs+bQ80XY6eikqxLJW1FCYaGZtSFcuEZq1bV5sVaVAZpkzgEzR4Yzi5Z+\nDfv9Ho64Max7ICKxiRIKFxBOB93FzOYCXwK9Yq0qAzTJnMV+WgpvXA+T/gFbtIGzhkKrTklXJVIQ\noly8NhM40sw2JazCtryq1+QKTTJnoU+HwGuXw4rvoNMl0PlqqL1J0lWJFIwoZx/1LXMfAHfvH1NN\nsdOhoyz0wwIYeiVMewW23gN6DoJt9066KpGCE+Xw0Yq02/WAE4BP4yknM3ToKIu4w5QX4PWrw6Ty\n4deHEULN2klXJlKQohw+uif9vpndTbggLafp0FEWWDo7rHUw/U1o0SE0sGu6c9JViRS0DbmiuT6h\nj5HIhikpgQmPw1v9wkjh2DvD2UVqYCeSuChzCh+TOh2V0K6iKZCz8wmSsIXTwzrJs96HHQ4LDewa\nb590VSKSEmWkcELa7TXAt+6ui9dk/RSvgTEPwIjboHY96P4w7NVTVySLZJlKQyG1pOZwd98lQ/VI\nPpo3JTSwm/cR7HJCaGDXsFnSVYlIOSoNBXcvNrPPzaylu8/KVFGSJ1avDL2K3hsA9beEU5+Gdt2T\nrkpEKhHl8FFjYKqZfUDa6anu3i22qmKkaxQyZNa4MDpY+AXs2ROOuRXq6+9cJNtFCYUbYq8ig3SN\nQsxW/QBv94cPBkKjFtDrZdjxyKSrEpGIooTCce5+VfoDZnYH8G48JcVP1yjEZPrb8OolsGw2dPgD\nHNEX6jZMuioRWQ9R1lM4qpzHjq3uQiSH/bgYXjkfnvkN1KoLZw+D4+5SIIjkoApHCmZ2HnA+sIOZ\nTUl7qiEwOu7CJEdMGwyvXQE/LoKDLoNDrwqnnIpITqrs8NFzwDDgNuDqtMeXu/viWKuS7Lf8Wxh6\nBXxaBM32gF4vwTZ7Jl2ViGykCkPB3ZcBy4DTM1eOZD13mPwcDL8WVv8UFr458EI1sBPJExvS+0gK\n1ZKvYcglMOMdaHkAdHsAmrRNuioRqUYKBalaSQmMfwzeuim0pTjubmh/LtSIcp6CiOQShYJU7rvP\nQwO72eOgzRHQdQBsrtN5RfKVQkHKV7waRt8H794BtevDrx+FPXuogZ1InlMoyC99Mzm0qJj/cehV\ndNzd0GCrpKsSkQxQKMj/rP4pjAxG3w+bNoHTnoFduyZdlYhkUEGFgprhVeLrMWF0sGg67N0Ljr4F\nNmmcdFUikmEFFQpqhleOVcvDWUXjHwsTyL97BdoclnRVIpKQggoFUDO8dfz3zdDA7vu50PE8OPx6\nqNsg6apEJEEFFwpCaGD3+jUwZRA02RnOfQO265B0VSKSBRQKhcQdpr0CQ6+En5bAIX+GQ64InU1F\nRIjWOnuDmVmX1HKe083s6nKev8zMppnZFDN728y2j7OegrZ8PrzQC148CzZrDr1HwuHXKRBEZB2x\njRTMrCbwEGE9hjnAeDMrcvdpaZtNAtq7+4+pVt13AqfFVVNBcodJz8Dw66B4FRzVH/a/AGpqkCgi\nvxTnJ0MHYLq7zwQws0FAd6A0FNx9RNr2Y4FeMdZTeBZ/GRrYzRwJ23eCrvdDkx2TrkpEslicodAc\nmJ12fw7QsZLtzyWs3/ALZtYb6A3QsqXOHKpSSTGM+xu8czNYTTj+Xtj3bDWwE5EqZcUxBDPrBbQH\nDi3veXcfCAwEaN++vWewtNyz4LNwEdqc8bDjUaGBXaMWSVclIjkizlCYC2yXdr9F6rF1mNmRwHXA\noe6+KsZ68tuan2H0ABh1F9RpAL95DPY4RQ3sRGS9xBkK44G2ZtaaEAY9gJ7pG5jZ3sDfgC7uviDG\nWvK7xcXcD0N7628/gd1Pgi53QIOmSVclIjkotlBw9zVm1gcYDtQEnnD3qWbWH5jg7kXAXUAD4EUL\nv9HOcvducdSTly0uVv8EI/4CYx6EBltDj+dhl+OSrkpEcliscwruPhQYWuaxvmm3j4zz/cvKqxYX\nX70XRgeLZ8I+Z4ZTTTfZPOmqRCTHZcVEs6yHld/DWzfChCegcSs4owh2KHd+XkRkvSkUcskXw2HI\npbB8HhzQBw67FupsmnRVIpJHFAq5YMUieP1q+Pif0HRXOPVpaNE+6apEJA8pFLKZO3zyMgz7czhs\ndOjVcPDlUKtO0pWJSJ5SKGSr77+B1y6Hz4fCtvtA9wdh692SrkpE8pxCIdu4w4dPwRs3QPHqsCzm\n/udDjZpJVyYiBUChkE0Wz4Sii+Cr/0Crg6HrfbBlm6SrEpEColDIBiXFMPYReOcWqFkbThgQrj1Q\nAzsRyTCFQtK+nRYa2M2dCDt1CR1NG+XRVdciklMUCklZ8zO8dy+MuhvqbQYnPR76FqmBnYgkSKGQ\nhDkTw+hgwbTQybTLHbDplklXJSKiUMion3+EEbfC2IehQTM4/QXYuUvSVYmIlFIoZMqXo0IDuyVf\nhVXQjroJ6jVKuioRkXUoFOK2clm45uDDp6BxazhzCLQ+OOmqRETKpVCI0+fDQgO7H76FAy+CztdA\nnfpJVyUiUiGFQhxWLAz9ij55GbbaDXo8B833SboqEZEqKRSqkzt8/CIMuwpWLYfDroNOl6iBnYjk\nDIVCdVk2B4ZcBv8dDs3bhwZ2W+2adFUiIutFobCxSkpg4v/BmzeCF8Mxt0HHP6qBnYjkJIXCxlg0\nIzSw+/o9aH1oaGC3ReukqxIR2WAKhQ1RvAbGPgQj/gI160K3B2Dv36lFhYjkPIXC+pr/MQzuA/Mm\nw87Hw/H3wGbbJF2ViEi1UChEtWYVjLoL3vsrbNIYTnkS2v1aowMRySsKhShmfxBGBws/h1/1gC63\nQf0tkq5KRKTaKRQq8/MKePtmGPcobNYcfvsStD0q6apERGKjUKjIjBHw6kWwdBbs93s44saw7oGI\nSB5TKJT101J44zqY9Axs0QbOGgqtOiVdlYhIRigU0n06BF67HFZ8BwddCodeBbU3SboqEZGMUSgA\n/LAAhl4J016BrfeAnoNg272TrkpEJOMKOxTc4aNB8PrVsPpHOPwG6HQx1KyddGUiIomoEec3N7Mu\nZva5mU03s6vLeb6umb2Qen7A3O8nAAAJPElEQVScmbWKs551LJ0Nz54Mr/wJmuwEf3oPDrlCgSAi\nBS22kYKZ1QQeAo4C5gDjzazI3aelbXYusMTddzSzHsAdwGlx1QSEBnYTHoe3+oWRwrF3hrOL1MBO\nRCTWw0cdgOnuPhPAzAYB3YH0UOgO9Evdfgl40MzM3T2OgrZZMxuevAlmjYEdDgsN7BpvH8dbiYjk\npDhDoTkwO+3+HKBjRdu4+xozWwZsCSys7mI6/zicc5c9CPXqQ/eHYa+ealEhIlJGTkw0m1lvoDdA\ny5YtN+h71G22E9OtE+3OHQgNt67O8kRE8kacoTAX2C7tfovUY+VtM8fMagGNgEVlv5G7DwQGArRv\n336DDi2dc3pPoOeGvFREpGDEefbReKCtmbU2szpAD6CozDZFwJmp2ycD78Q1nyAiIlWLbaSQmiPo\nAwwHagJPuPtUM+sPTHD3IuBx4B9mNh1YTAgOERFJSKxzCu4+FBha5rG+abdXAqfEWYOIiEQX68Vr\nIiKSWxQKIiJSSqEgIiKlFAoiIlJKoSAiIqUs1y4LMLPvgK838OVNiKGFRpbTPhcG7XNh2Jh93t7d\nm1a1Uc6FwsYwswnu3j7pOjJJ+1wYtM+FIRP7rMNHIiJSSqEgIiKlCi0UBiZdQAK0z4VB+1wYYt/n\ngppTEBGRyhXaSEFERCqRl6FgZl3M7HMzm25mV5fzfF0zeyH1/Dgza5X5KqtXhH2+zMymmdkUM3vb\nzHJ+HdKq9jltu5PMzM0s589UibLPZnZq6t96qpk9l+kaq1uEn+2WZjbCzCalfr6PS6LO6mJmT5jZ\nAjP7pILnzczuT/19TDGzfaq1AHfPqy9Cm+4ZwA5AHeAjoF2Zbc4HHk3d7gG8kHTdGdjnw4D6qdvn\nFcI+p7ZrCIwCxgLtk647A//ObYFJQOPU/a2SrjsD+zwQOC91ux3wVdJ1b+Q+HwLsA3xSwfPHAcMA\nA/YHxlXn++fjSKEDMN3dZ7r7z8AgoHuZbboDT6VuvwQcYZbTCzZXuc/uPsLdf0zdHUtYCS+XRfl3\nBrgZuANYmcniYhJln/8APOTuSwDcfUGGa6xuUfbZgc1StxsB32Swvmrn7qMI68tUpDvwtAdjgc3N\nbJvqev98DIXmwOy0+3NSj5W7jbuvAZYBW2akunhE2ed05xJ+08hlVe5zali9nbu/lsnCYhTl33kn\nYCczG21mY82sS8aqi0eUfe4H9DKzOYT1Wy7MTGmJWd//7+sl1kV2JPuYWS+gPXBo0rXEycxqAPcC\nZyVcSqbVIhxC6kwYDY4ysz3cfWmiVcXrdOBJd7/HzA4grOa4u7uXJF1YLsrHkcJcYLu0+y1Sj5W7\njZnVIgw5F2WkunhE2WfM7EjgOqCbu6/KUG1xqWqfGwK7AyPN7CvCsdeiHJ9sjvLvPAcocvfV7v4l\n8AUhJHJVlH0+F/gngLuPAeoRegTlq0j/3zdUPobCeKCtmbU2szqEieSiMtsUAWembp8MvOOpGZwc\nVeU+m9newN8IgZDrx5mhin1292Xu3sTdW7l7K8I8Sjd3n5BMudUiys/2K4RRAmbWhHA4aWYmi6xm\nUfZ5FnAEgJntSgiF7zJaZWYVAWekzkLaH1jm7vOq65vn3eEjd19jZn2A4YQzF55w96lm1h+Y4O5F\nwOOEIeZ0woROj+Qq3ngR9/kuoAHwYmpOfZa7d0us6I0UcZ/zSsR9Hg4cbWbTgGLgSnfP2VFwxH2+\nHHjMzC4lTDqflcu/5JnZ84Rgb5KaJ7kRqA3g7o8S5k2OA6YDPwJnV+v75/DfnYiIVLN8PHwkIiIb\nSKEgIiKlFAoiIlJKoSAiIqUUCiIiUkqhIFnNzC4ys0/N7NlKtulsZkMyWVdFzKzb2k6eZvZrM2uX\n9lz/1AWEmaqls5kdmKn3k/yQd9cpSN45HzjS3eckXUgUqfPm114j8WtgCDAt9Vzf6n4/M6uV6t9V\nns7AD8D71f2+kr80UpCsZWaPElomDzOzS82sg5mNSfXNf9/Mdi7nNYea2eTU1yQza5h6/EozG5/q\nP39TBe/3g5n9NbUOwdtm1jT1+F6p5nJTzOzfZtY49fhF9r81KgalHjvLzB5M/YbeDbgrVUsbM3vS\nzE5OrQ/wYtr7lo50zOzo1D5+aGYvmlmDcuocaWYDzGwCcLGZdbWwLsgkM3vLzLa2sEbIn4BLU+9/\nsJk1NbOXU38P482s00b880i+Srp3uL70VdkX8BXQJHV7M6BW6vaRwMup252BIanbrwKdUrcbEEbD\nRxN67hvhF6EhwCHlvJcDv03d7gs8mLo9BTg0dbs/MCB1+xugbur25qk/z0p73ZPAyWnf/0lCW5Va\nhNYMm6YefwToRejXMyrt8auAvuXUORJ4OO1+Y/53IervgXtSt/sBV6Rt9xxwUOp2S+DTpP999ZV9\nXzp8JLmkEfCUmbUlfIDXLmeb0cC9qTmIf7n7HDM7mhAMk1LbNCA0iRtV5rUlwAup288A/zKzRoQP\n/HdTjz8FrP0tfwrwrJm9Qug5FImH1g2vA13N7CXgeODPhM617YDRqVYkdYAxFXybF9JutwBesNBT\nvw7wZQWvORJoZ/9bOmQzM2vg7j9ErV3yn0JBcsnNwAh3PzF1eGRk2Q3c/XYze43QG2a0mR1DGCHc\n5u5/W8/3q6oHzPGEVbK6AteZ2R7r8b0HAX0IvbcmuPtyC5/Wb7r76RFevyLt9gPAve5eZGadCSOE\n8tQA9nf3fFhwSGKiOQXJJY34X4vgs8rbwMzauPvH7n4HocPmLoRmauesPT5vZs3NbKtyXl6DcHgH\noCfwnrsvA5aY2cGpx38HvGthvYbt3H0E4TBPI8IIJN1yQgvv8rxLWHLxD4SAgNDJtZOZ7Ziqc1Mz\n26mC16dL/3s5M+3xsu//BmkL0JjZXhG+txQYhYLkkjuB28xsEhWPci8xs0/MbAqwGhjm7m8QjqeP\nMbOPCUuwlvdhvQLoYGHB9MMJ8wcQPmjvSn3PvVKP1wSeSX2/ScD9/suFbAYBV6YmgNukP+HuxYS5\njWNTf+Lu3xHC7vnUe40hhFpV+hG6304EFqY9/ipw4tqJZuAioH1qYnwaYSJaZB3qkiqSYmY/uPsv\nzvYRKSQaKYiISCmNFEREpJRGCiIiUkqhICIipRQKIiJSSqEgIiKlFAoiIlJKoSAiIqX+H7oaklJf\nuvQSAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"DezYVUMdGl9o","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"9d0a032f-8c02-4f1f-d38b-82626b9b9f32","executionInfo":{"status":"ok","timestamp":1580428092027,"user_tz":300,"elapsed":432,"user":{"displayName":"Weihan Ou","photoUrl":"","userId":"00302480855713405747"}}},"source":["from sklearn.metrics import accuracy_score\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import recall_score\n","\n","t_model = 'sim'\n","typ = 'fpr'\n","\n","pred = data_te['sim_pred']\n","label = data_te['label']\n","\n","thldl = 400\n","thldh = 600\n","\n","if typ == 'acc':\n","  for thld in range(thldl,thldh):\n","    thld_ = thld/1000\n","    result = (pred >= thld_).astype(int)\n","    acc = accuracy_score(result, label)\n","    print(str(thld_)+', '+str(round(acc, 4)))\n","\n","elif typ == 'fpr':\n","  for thld in range(495,496):\n","    thld_ = thld/1000\n","    result = (pred >= thld_).astype(int)\n","    fpr = len(result[(result>0) & (np.asarray(label)==0)]) / len(result)\n","    print(str(round(fpr, 4)))\n","\n","elif typ == 'precision':\n","  for thld in range(495,496):\n","    thld_ = thld/1000\n","    result = (pred >= thld_).astype(int)\n","    precision = precision_score(result, label)\n","    print((round(precision, 4)))\n","    \n","elif typ == 'recall':\n","  for thld in range(495,496):\n","    thld_ = thld/1000\n","    result = (pred >= thld_).astype(int)\n","    recall = recall_score(result, label)\n","    print(str(round(recall, 4)))"],"execution_count":39,"outputs":[{"output_type":"stream","text":["0.0417\n"],"name":"stdout"}]}]}